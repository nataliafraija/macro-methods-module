# Load packages
library(ape)
library(geiger)
library(OUwie)
# Read in data
magicaldata <- read.csv("magicalcreatures.csv")
# Check data is loaded correctly
str(magicaldata)
# Read in tree
magicaltree <- read.nexus("magicaltree.nex")
# Check tree is loaded correctly
str(magicaltree)
# Ensure tree is fully bifurcating
magicaltree <- multi2di(magicaltree)
# Replace spaces with underscores in the species names
magicaldata$Species <- gsub(" ", "_", magicaldata$Species)
# Add species names to row names
row.names(magicaldata) <- magicaldata$Species
magicaldata2 <- magicaldata[, 2:5]
match.species <- treedata(magicaltree, magicaldata2)
mytree <- match.species$phy
mydata <- match.species$data
# Reorder the data so it's the same order as in the tree
mydata <- mydata[match(mytree$tip.label,rownames(mydata)),]
# Create a vector of two colours
social.colors <- c("lightblue", "plum")
# Plot the tree, add coloured tip labels and a legend
plot(mytree, cex = 0.5)
tiplabels(pch = 16, col = social.colors[mydata[,"SocialStatus"]])
legend("bottomleft",legend=c("solitary", "social"),
pch = 15, col=c("lightblue", "plum"), bty = "n")
equal <- fitDiscrete(mytree, mydata[ , "SocialStatus"], model = "ER")
#sym <- fitDiscrete(mytree, mydata[ , "SocialStatus"], model = "SYM")
ard <- fitDiscrete(mytree, mydata[ , "SocialStatus"], model = "ARD")
equal
ard
aic.discrete <- setNames(c(equal$opt$aic, ard$opt$aic), c("equal", "different"))
weights <- aicw(aic.discrete)
weights
asr <- ace(mydata[ , "SocialStatus"], mytree, type = "discrete", model = "ER")
plot(mytree, cex = 0.5)
nodelabels(pie = asr$lik.anc, piecol = social.colors, cex = 0.5)
tiplabels(pch = 16, col = social.colors[mydata[,"SocialStatus"]])
legend("bottomleft",legend=c("solitary", "social"),
pch = 15, col=c("lightblue", "plum"), bty = "n")
node.states <- asr$lik.anc
rownames(node.states) <- seq(1:nrow(node.states)) + length(mytree$tip.label)
node.states
best <- apply(node.states, 1, which.max)
best
mytree$node.label <- best
mytree
ouwie.data <- data.frame(species = rownames(mydata), regime = mydata[ , "SocialStatus"],
trait = log(mydata[ , "BodySize_kg"]))
head(ouwie.data)
BMvariable <- OUwie(mytree, ouwie.data, model = "BMS")
BMvariable
OUmulti <- OUwie(mytree, ouwie.data, model = "OUM")
# Look at the results
OUmulti
aic.scores <- setNames(c(BM$opt$aicc, OU$opt$aicc, EB$opt$aicc, BMvariable$AICc, OUmulti$AICc),
c("BM", "OU", "EB", "BMvariable", "OUmulti"))
BM <- fitContinuous(mytree, log(mydata[,"BodySize_kg"]), model = c("BM"))
OU <- fitContinuous(mytree, log(mydata[,"BodySize_kg"]), model = c("OU"))
EB <- fitContinuous(mytree, log(mydata[,"BodySize_kg"]), model = c("EB"))
aic.scores <- setNames(c(BM$opt$aicc, OU$opt$aicc, EB$opt$aicc, BMvariable$AICc, OUmulti$AICc),
c("BM", "OU", "EB", "BMvariable", "OUmulti"))
aicw(aic.scores)
library(BAMMtools)
library(coda)
# Read in the file
mcmc <- read.csv("marsupial_mcmc_out.txt")
# Take a look at the plot
plot(mcmc$logLik ~ mcmc$generation)
tree <- read.tree("marsupialtree.tre")
# This step may take some time...
edata <- getEventData(tree, eventdata = "marsupial_event_data.txt", burnin = 0.1)
str(tree)
